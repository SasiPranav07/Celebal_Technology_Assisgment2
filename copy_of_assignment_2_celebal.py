# -*- coding: utf-8 -*-
"""Copy of Assignment-2_celebal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b7Vg3WGwmsUpspuUT6z0sZ0h_71FOMp5

# **Linked-list Assignment-2**
"""

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        """
        Adds a new node with the given data to the end of the list.
        """
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            return
        current = self.head
        while current.next is not None:
            current = current.next
        current.next = new_node

    def print_list(self):
        """
        Prints the linked list in the format: data -> data -> ... -> None
        """
        current = self.head
        while current is not None:
            print(current.data, end=" -> ")
            current = current.next
        print("None")

    def delete_nth(self, n):
        if n < 1:
            raise IndexError("Index must be positive")
        if self.head is None:
            raise IndexError("Index out of range")

        if n == 1:
            self.head = self.head.next
            return

        # To Find the (n-1)th node
        prev = self.head
        for i in range(1, n):
            if prev.next is None:
                raise IndexError("Index out of range")
            prev = prev.next

        # To Check if the nth node exists
        if prev.next is None:
            raise IndexError("Index out of range")

        # To Delete the nth node
        prev.next = prev.next.next

# Test the implementation
if __name__ == "__main__":
    # Create a sample linked list: 1 -> 2 -> 3 -> 4
    ll = LinkedList()
    ll.append(1)
    ll.append(2)
    ll.append(3)
    ll.append(4)

    # Print the original list
    print("Original list:")
    ll.print_list()

    # Delete the 2nd node
    print("After deleting 2nd node:")
    ll.delete_nth(2)
    ll.print_list()

    # Delete the 1st node
    print("After deleting 1st node:")
    ll.delete_nth(1)
    ll.print_list()

    # Try deleting a node with an out-of-range index
    print("Trying to delete 3rd node (out of range):")
    try:
        ll.delete_nth(3)
    except IndexError as e:
        print(e)

    # Try deleting from an empty list
    print("Trying to delete from an empty list:")
    ll2 = LinkedList()
    try:
        ll2.delete_nth(1)
    except IndexError as e:
        print(e)
    # Try deleting with an invalid index (negative)
    print("Trying to delete with negative index:")
    try:
        ll.delete_nth(-1)
    except IndexError as e:
        print(e)